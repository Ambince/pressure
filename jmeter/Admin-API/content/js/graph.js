/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1121.0, "minX": 0.0, "maxY": 9953.0, "series": [{"data": [[0.0, 1121.0], [0.1, 1165.0], [0.2, 1850.0], [0.3, 1850.0], [0.4, 1987.0], [0.5, 2207.0], [0.6, 2239.0], [0.7, 2450.0], [0.8, 2477.0], [0.9, 2486.0], [1.0, 2493.0], [1.1, 2532.0], [1.2, 2661.0], [1.3, 2950.0], [1.4, 2950.0], [1.5, 3253.0], [1.6, 3279.0], [1.7, 3308.0], [1.8, 3329.0], [1.9, 3360.0], [2.0, 3385.0], [2.1, 3427.0], [2.2, 3488.0], [2.3, 3492.0], [2.4, 3506.0], [2.5, 3511.0], [2.6, 3511.0], [2.7, 3514.0], [2.8, 3517.0], [2.9, 3517.0], [3.0, 3519.0], [3.1, 3523.0], [3.2, 3524.0], [3.3, 3537.0], [3.4, 3538.0], [3.5, 3539.0], [3.6, 3543.0], [3.7, 3549.0], [3.8, 3553.0], [3.9, 3601.0], [4.0, 3775.0], [4.1, 3784.0], [4.2, 3831.0], [4.3, 3893.0], [4.4, 3893.0], [4.5, 3945.0], [4.6, 4006.0], [4.7, 4133.0], [4.8, 4136.0], [4.9, 4142.0], [5.0, 4337.0], [5.1, 4357.0], [5.2, 4383.0], [5.3, 4400.0], [5.4, 4422.0], [5.5, 4435.0], [5.6, 4436.0], [5.7, 4440.0], [5.8, 4448.0], [5.9, 4461.0], [6.0, 4479.0], [6.1, 4483.0], [6.2, 4493.0], [6.3, 4512.0], [6.4, 4515.0], [6.5, 4517.0], [6.6, 4518.0], [6.7, 4543.0], [6.8, 4548.0], [6.9, 4557.0], [7.0, 4558.0], [7.1, 4567.0], [7.2, 4580.0], [7.3, 4655.0], [7.4, 4680.0], [7.5, 4728.0], [7.6, 4742.0], [7.7, 4749.0], [7.8, 4759.0], [7.9, 4766.0], [8.0, 4779.0], [8.1, 4813.0], [8.2, 4814.0], [8.3, 4814.0], [8.4, 4830.0], [8.5, 4833.0], [8.6, 4844.0], [8.7, 4846.0], [8.8, 4856.0], [8.9, 4858.0], [9.0, 4865.0], [9.1, 4881.0], [9.2, 4901.0], [9.3, 5103.0], [9.4, 5121.0], [9.5, 5135.0], [9.6, 5154.0], [9.7, 5160.0], [9.8, 5180.0], [9.9, 5188.0], [10.0, 5193.0], [10.1, 5195.0], [10.2, 5199.0], [10.3, 5209.0], [10.4, 5215.0], [10.5, 5227.0], [10.6, 5236.0], [10.7, 5261.0], [10.8, 5263.0], [10.9, 5276.0], [11.0, 5279.0], [11.1, 5279.0], [11.2, 5281.0], [11.3, 5284.0], [11.4, 5286.0], [11.5, 5287.0], [11.6, 5291.0], [11.7, 5296.0], [11.8, 5314.0], [11.9, 5323.0], [12.0, 5335.0], [12.1, 5345.0], [12.2, 5347.0], [12.3, 5359.0], [12.4, 5360.0], [12.5, 5365.0], [12.6, 5372.0], [12.7, 5372.0], [12.8, 5374.0], [12.9, 5377.0], [13.0, 5377.0], [13.1, 5383.0], [13.2, 5387.0], [13.3, 5389.0], [13.4, 5390.0], [13.5, 5390.0], [13.6, 5390.0], [13.7, 5401.0], [13.8, 5401.0], [13.9, 5401.0], [14.0, 5403.0], [14.1, 5405.0], [14.2, 5406.0], [14.3, 5406.0], [14.4, 5410.0], [14.5, 5411.0], [14.6, 5412.0], [14.7, 5415.0], [14.8, 5416.0], [14.9, 5428.0], [15.0, 5442.0], [15.1, 5443.0], [15.2, 5447.0], [15.3, 5454.0], [15.4, 5456.0], [15.5, 5465.0], [15.6, 5472.0], [15.7, 5475.0], [15.8, 5476.0], [15.9, 5486.0], [16.0, 5490.0], [16.1, 5493.0], [16.2, 5497.0], [16.3, 5510.0], [16.4, 5531.0], [16.5, 5536.0], [16.6, 5537.0], [16.7, 5540.0], [16.8, 5548.0], [16.9, 5557.0], [17.0, 5560.0], [17.1, 5601.0], [17.2, 5617.0], [17.3, 5649.0], [17.4, 5663.0], [17.5, 5668.0], [17.6, 5672.0], [17.7, 5689.0], [17.8, 5694.0], [17.9, 5709.0], [18.0, 5735.0], [18.1, 5737.0], [18.2, 5755.0], [18.3, 5757.0], [18.4, 5796.0], [18.5, 5803.0], [18.6, 5803.0], [18.7, 5806.0], [18.8, 5808.0], [18.9, 5808.0], [19.0, 5810.0], [19.1, 5815.0], [19.2, 5815.0], [19.3, 5818.0], [19.4, 5818.0], [19.5, 5820.0], [19.6, 5821.0], [19.7, 5823.0], [19.8, 5833.0], [19.9, 5847.0], [20.0, 5850.0], [20.1, 5861.0], [20.2, 5871.0], [20.3, 5881.0], [20.4, 5883.0], [20.5, 5901.0], [20.6, 5992.0], [20.7, 6018.0], [20.8, 6077.0], [20.9, 6103.0], [21.0, 6103.0], [21.1, 6170.0], [21.2, 6195.0], [21.3, 6212.0], [21.4, 6213.0], [21.5, 6214.0], [21.6, 6214.0], [21.7, 6215.0], [21.8, 6216.0], [21.9, 6216.0], [22.0, 6218.0], [22.1, 6223.0], [22.2, 6231.0], [22.3, 6277.0], [22.4, 6281.0], [22.5, 6306.0], [22.6, 6321.0], [22.7, 6330.0], [22.8, 6338.0], [22.9, 6379.0], [23.0, 6380.0], [23.1, 6382.0], [23.2, 6390.0], [23.3, 6396.0], [23.4, 6412.0], [23.5, 6424.0], [23.6, 6425.0], [23.7, 6427.0], [23.8, 6442.0], [23.9, 6444.0], [24.0, 6450.0], [24.1, 6483.0], [24.2, 6487.0], [24.3, 6497.0], [24.4, 6505.0], [24.5, 6507.0], [24.6, 6509.0], [24.7, 6510.0], [24.8, 6524.0], [24.9, 6528.0], [25.0, 6528.0], [25.1, 6560.0], [25.2, 6567.0], [25.3, 6570.0], [25.4, 6571.0], [25.5, 6573.0], [25.6, 6574.0], [25.7, 6581.0], [25.8, 6602.0], [25.9, 6616.0], [26.0, 6623.0], [26.1, 6625.0], [26.2, 6628.0], [26.3, 6629.0], [26.4, 6631.0], [26.5, 6632.0], [26.6, 6635.0], [26.7, 6636.0], [26.8, 6640.0], [26.9, 6645.0], [27.0, 6646.0], [27.1, 6647.0], [27.2, 6650.0], [27.3, 6651.0], [27.4, 6652.0], [27.5, 6654.0], [27.6, 6655.0], [27.7, 6659.0], [27.8, 6672.0], [27.9, 6674.0], [28.0, 6678.0], [28.1, 6683.0], [28.2, 6694.0], [28.3, 6696.0], [28.4, 6698.0], [28.5, 6699.0], [28.6, 6700.0], [28.7, 6704.0], [28.8, 6708.0], [28.9, 6709.0], [29.0, 6711.0], [29.1, 6715.0], [29.2, 6716.0], [29.3, 6717.0], [29.4, 6717.0], [29.5, 6721.0], [29.6, 6723.0], [29.7, 6723.0], [29.8, 6729.0], [29.9, 6730.0], [30.0, 6736.0], [30.1, 6742.0], [30.2, 6743.0], [30.3, 6744.0], [30.4, 6744.0], [30.5, 6746.0], [30.6, 6748.0], [30.7, 6750.0], [30.8, 6751.0], [30.9, 6752.0], [31.0, 6755.0], [31.1, 6758.0], [31.2, 6758.0], [31.3, 6758.0], [31.4, 6765.0], [31.5, 6777.0], [31.6, 6782.0], [31.7, 6783.0], [31.8, 6785.0], [31.9, 6792.0], [32.0, 6793.0], [32.1, 6794.0], [32.2, 6795.0], [32.3, 6796.0], [32.4, 6798.0], [32.5, 6798.0], [32.6, 6801.0], [32.7, 6808.0], [32.8, 6810.0], [32.9, 6816.0], [33.0, 6820.0], [33.1, 6820.0], [33.2, 6821.0], [33.3, 6821.0], [33.4, 6822.0], [33.5, 6824.0], [33.6, 6832.0], [33.7, 6834.0], [33.8, 6840.0], [33.9, 6850.0], [34.0, 6850.0], [34.1, 6850.0], [34.2, 6850.0], [34.3, 6851.0], [34.4, 6851.0], [34.5, 6856.0], [34.6, 6857.0], [34.7, 6859.0], [34.8, 6870.0], [34.9, 6875.0], [35.0, 6876.0], [35.1, 6877.0], [35.2, 6877.0], [35.3, 6877.0], [35.4, 6881.0], [35.5, 6882.0], [35.6, 6891.0], [35.7, 6894.0], [35.8, 6895.0], [35.9, 6901.0], [36.0, 6911.0], [36.1, 6913.0], [36.2, 6915.0], [36.3, 6928.0], [36.4, 6944.0], [36.5, 6946.0], [36.6, 6950.0], [36.7, 6950.0], [36.8, 6958.0], [36.9, 6959.0], [37.0, 6960.0], [37.1, 6966.0], [37.2, 6971.0], [37.3, 6976.0], [37.4, 6979.0], [37.5, 6979.0], [37.6, 6981.0], [37.7, 6982.0], [37.8, 6984.0], [37.9, 6989.0], [38.0, 6992.0], [38.1, 7001.0], [38.2, 7001.0], [38.3, 7003.0], [38.4, 7003.0], [38.5, 7004.0], [38.6, 7014.0], [38.7, 7020.0], [38.8, 7022.0], [38.9, 7028.0], [39.0, 7041.0], [39.1, 7043.0], [39.2, 7044.0], [39.3, 7057.0], [39.4, 7067.0], [39.5, 7071.0], [39.6, 7075.0], [39.7, 7084.0], [39.8, 7096.0], [39.9, 7130.0], [40.0, 7138.0], [40.1, 7139.0], [40.2, 7145.0], [40.3, 7149.0], [40.4, 7156.0], [40.5, 7169.0], [40.6, 7173.0], [40.7, 7179.0], [40.8, 7180.0], [40.9, 7188.0], [41.0, 7198.0], [41.1, 7198.0], [41.2, 7199.0], [41.3, 7200.0], [41.4, 7211.0], [41.5, 7216.0], [41.6, 7230.0], [41.7, 7278.0], [41.8, 7279.0], [41.9, 7291.0], [42.0, 7292.0], [42.1, 7302.0], [42.2, 7314.0], [42.3, 7327.0], [42.4, 7330.0], [42.5, 7336.0], [42.6, 7347.0], [42.7, 7365.0], [42.8, 7371.0], [42.9, 7377.0], [43.0, 7378.0], [43.1, 7381.0], [43.2, 7384.0], [43.3, 7401.0], [43.4, 7405.0], [43.5, 7410.0], [43.6, 7420.0], [43.7, 7433.0], [43.8, 7433.0], [43.9, 7435.0], [44.0, 7444.0], [44.1, 7444.0], [44.2, 7448.0], [44.3, 7470.0], [44.4, 7473.0], [44.5, 7479.0], [44.6, 7480.0], [44.7, 7480.0], [44.8, 7481.0], [44.9, 7488.0], [45.0, 7491.0], [45.1, 7492.0], [45.2, 7492.0], [45.3, 7494.0], [45.4, 7495.0], [45.5, 7503.0], [45.6, 7504.0], [45.7, 7505.0], [45.8, 7505.0], [45.9, 7509.0], [46.0, 7516.0], [46.1, 7530.0], [46.2, 7571.0], [46.3, 7584.0], [46.4, 7585.0], [46.5, 7593.0], [46.6, 7596.0], [46.7, 7597.0], [46.8, 7600.0], [46.9, 7603.0], [47.0, 7604.0], [47.1, 7608.0], [47.2, 7609.0], [47.3, 7609.0], [47.4, 7610.0], [47.5, 7612.0], [47.6, 7617.0], [47.7, 7618.0], [47.8, 7620.0], [47.9, 7620.0], [48.0, 7621.0], [48.1, 7621.0], [48.2, 7625.0], [48.3, 7626.0], [48.4, 7637.0], [48.5, 7638.0], [48.6, 7642.0], [48.7, 7644.0], [48.8, 7647.0], [48.9, 7649.0], [49.0, 7656.0], [49.1, 7663.0], [49.2, 7664.0], [49.3, 7669.0], [49.4, 7671.0], [49.5, 7678.0], [49.6, 7684.0], [49.7, 7695.0], [49.8, 7708.0], [49.9, 7715.0], [50.0, 7719.0], [50.1, 7727.0], [50.2, 7735.0], [50.3, 7736.0], [50.4, 7738.0], [50.5, 7738.0], [50.6, 7739.0], [50.7, 7753.0], [50.8, 7761.0], [50.9, 7764.0], [51.0, 7766.0], [51.1, 7767.0], [51.2, 7768.0], [51.3, 7769.0], [51.4, 7777.0], [51.5, 7778.0], [51.6, 7782.0], [51.7, 7785.0], [51.8, 7785.0], [51.9, 7788.0], [52.0, 7790.0], [52.1, 7791.0], [52.2, 7792.0], [52.3, 7797.0], [52.4, 7798.0], [52.5, 7799.0], [52.6, 7806.0], [52.7, 7818.0], [52.8, 7821.0], [52.9, 7821.0], [53.0, 7826.0], [53.1, 7837.0], [53.2, 7838.0], [53.3, 7854.0], [53.4, 7856.0], [53.5, 7862.0], [53.6, 7864.0], [53.7, 7869.0], [53.8, 7870.0], [53.9, 7878.0], [54.0, 7884.0], [54.1, 7888.0], [54.2, 7889.0], [54.3, 7889.0], [54.4, 7890.0], [54.5, 7897.0], [54.6, 7900.0], [54.7, 7906.0], [54.8, 7927.0], [54.9, 7943.0], [55.0, 7948.0], [55.1, 7958.0], [55.2, 7959.0], [55.3, 7963.0], [55.4, 7969.0], [55.5, 7970.0], [55.6, 7971.0], [55.7, 7978.0], [55.8, 7979.0], [55.9, 7979.0], [56.0, 7987.0], [56.1, 7996.0], [56.2, 7996.0], [56.3, 7999.0], [56.4, 8000.0], [56.5, 8001.0], [56.6, 8003.0], [56.7, 8004.0], [56.8, 8005.0], [56.9, 8006.0], [57.0, 8007.0], [57.1, 8012.0], [57.2, 8015.0], [57.3, 8021.0], [57.4, 8023.0], [57.5, 8025.0], [57.6, 8027.0], [57.7, 8027.0], [57.8, 8029.0], [57.9, 8030.0], [58.0, 8034.0], [58.1, 8036.0], [58.2, 8037.0], [58.3, 8040.0], [58.4, 8044.0], [58.5, 8046.0], [58.6, 8049.0], [58.7, 8052.0], [58.8, 8055.0], [58.9, 8056.0], [59.0, 8059.0], [59.1, 8070.0], [59.2, 8083.0], [59.3, 8088.0], [59.4, 8088.0], [59.5, 8088.0], [59.6, 8092.0], [59.7, 8098.0], [59.8, 8104.0], [59.9, 8115.0], [60.0, 8121.0], [60.1, 8121.0], [60.2, 8121.0], [60.3, 8122.0], [60.4, 8134.0], [60.5, 8136.0], [60.6, 8139.0], [60.7, 8139.0], [60.8, 8142.0], [60.9, 8150.0], [61.0, 8151.0], [61.1, 8156.0], [61.2, 8157.0], [61.3, 8159.0], [61.4, 8167.0], [61.5, 8169.0], [61.6, 8182.0], [61.7, 8189.0], [61.8, 8191.0], [61.9, 8195.0], [62.0, 8226.0], [62.1, 8248.0], [62.2, 8253.0], [62.3, 8253.0], [62.4, 8258.0], [62.5, 8264.0], [62.6, 8307.0], [62.7, 8311.0], [62.8, 8311.0], [62.9, 8333.0], [63.0, 8336.0], [63.1, 8350.0], [63.2, 8360.0], [63.3, 8362.0], [63.4, 8385.0], [63.5, 8386.0], [63.6, 8395.0], [63.7, 8399.0], [63.8, 8399.0], [63.9, 8411.0], [64.0, 8411.0], [64.1, 8424.0], [64.2, 8429.0], [64.3, 8437.0], [64.4, 8439.0], [64.5, 8442.0], [64.6, 8457.0], [64.7, 8466.0], [64.8, 8470.0], [64.9, 8475.0], [65.0, 8476.0], [65.1, 8498.0], [65.2, 8500.0], [65.3, 8502.0], [65.4, 8505.0], [65.5, 8509.0], [65.6, 8532.0], [65.7, 8536.0], [65.8, 8544.0], [65.9, 8545.0], [66.0, 8548.0], [66.1, 8553.0], [66.2, 8557.0], [66.3, 8566.0], [66.4, 8580.0], [66.5, 8587.0], [66.6, 8589.0], [66.7, 8593.0], [66.8, 8594.0], [66.9, 8594.0], [67.0, 8596.0], [67.1, 8609.0], [67.2, 8628.0], [67.3, 8651.0], [67.4, 8659.0], [67.5, 8660.0], [67.6, 8662.0], [67.7, 8665.0], [67.8, 8672.0], [67.9, 8676.0], [68.0, 8688.0], [68.1, 8692.0], [68.2, 8698.0], [68.3, 8698.0], [68.4, 8699.0], [68.5, 8699.0], [68.6, 8701.0], [68.7, 8703.0], [68.8, 8709.0], [68.9, 8713.0], [69.0, 8716.0], [69.1, 8722.0], [69.2, 8722.0], [69.3, 8726.0], [69.4, 8732.0], [69.5, 8735.0], [69.6, 8736.0], [69.7, 8743.0], [69.8, 8746.0], [69.9, 8752.0], [70.0, 8764.0], [70.1, 8767.0], [70.2, 8768.0], [70.3, 8777.0], [70.4, 8794.0], [70.5, 8795.0], [70.6, 8796.0], [70.7, 8797.0], [70.8, 8799.0], [70.9, 8802.0], [71.0, 8808.0], [71.1, 8808.0], [71.2, 8828.0], [71.3, 8830.0], [71.4, 8830.0], [71.5, 8834.0], [71.6, 8837.0], [71.7, 8838.0], [71.8, 8841.0], [71.9, 8853.0], [72.0, 8855.0], [72.1, 8857.0], [72.2, 8860.0], [72.3, 8860.0], [72.4, 8865.0], [72.5, 8867.0], [72.6, 8871.0], [72.7, 8872.0], [72.8, 8872.0], [72.9, 8886.0], [73.0, 8888.0], [73.1, 8888.0], [73.2, 8897.0], [73.3, 8897.0], [73.4, 8902.0], [73.5, 8905.0], [73.6, 8905.0], [73.7, 8912.0], [73.8, 8918.0], [73.9, 8922.0], [74.0, 8924.0], [74.1, 8925.0], [74.2, 8929.0], [74.3, 8941.0], [74.4, 8942.0], [74.5, 8946.0], [74.6, 8954.0], [74.7, 8957.0], [74.8, 8957.0], [74.9, 8958.0], [75.0, 8967.0], [75.1, 8969.0], [75.2, 8981.0], [75.3, 8982.0], [75.4, 8989.0], [75.5, 8991.0], [75.6, 9022.0], [75.7, 9022.0], [75.8, 9038.0], [75.9, 9039.0], [76.0, 9041.0], [76.1, 9043.0], [76.2, 9044.0], [76.3, 9047.0], [76.4, 9047.0], [76.5, 9053.0], [76.6, 9057.0], [76.7, 9060.0], [76.8, 9060.0], [76.9, 9061.0], [77.0, 9062.0], [77.1, 9062.0], [77.2, 9064.0], [77.3, 9065.0], [77.4, 9070.0], [77.5, 9071.0], [77.6, 9071.0], [77.7, 9072.0], [77.8, 9072.0], [77.9, 9073.0], [78.0, 9075.0], [78.1, 9081.0], [78.2, 9082.0], [78.3, 9083.0], [78.4, 9088.0], [78.5, 9096.0], [78.6, 9098.0], [78.7, 9098.0], [78.8, 9099.0], [78.9, 9110.0], [79.0, 9117.0], [79.1, 9119.0], [79.2, 9125.0], [79.3, 9127.0], [79.4, 9129.0], [79.5, 9131.0], [79.6, 9141.0], [79.7, 9142.0], [79.8, 9156.0], [79.9, 9158.0], [80.0, 9163.0], [80.1, 9169.0], [80.2, 9171.0], [80.3, 9183.0], [80.4, 9200.0], [80.5, 9200.0], [80.6, 9209.0], [80.7, 9212.0], [80.8, 9222.0], [80.9, 9242.0], [81.0, 9242.0], [81.1, 9244.0], [81.2, 9256.0], [81.3, 9256.0], [81.4, 9258.0], [81.5, 9258.0], [81.6, 9262.0], [81.7, 9266.0], [81.8, 9269.0], [81.9, 9271.0], [82.0, 9278.0], [82.1, 9279.0], [82.2, 9280.0], [82.3, 9284.0], [82.4, 9286.0], [82.5, 9294.0], [82.6, 9306.0], [82.7, 9313.0], [82.8, 9315.0], [82.9, 9317.0], [83.0, 9317.0], [83.1, 9317.0], [83.2, 9325.0], [83.3, 9331.0], [83.4, 9335.0], [83.5, 9336.0], [83.6, 9347.0], [83.7, 9362.0], [83.8, 9366.0], [83.9, 9376.0], [84.0, 9384.0], [84.1, 9388.0], [84.2, 9389.0], [84.3, 9391.0], [84.4, 9392.0], [84.5, 9392.0], [84.6, 9399.0], [84.7, 9402.0], [84.8, 9404.0], [84.9, 9411.0], [85.0, 9415.0], [85.1, 9418.0], [85.2, 9419.0], [85.3, 9420.0], [85.4, 9422.0], [85.5, 9429.0], [85.6, 9430.0], [85.7, 9441.0], [85.8, 9446.0], [85.9, 9447.0], [86.0, 9447.0], [86.1, 9448.0], [86.2, 9448.0], [86.3, 9453.0], [86.4, 9458.0], [86.5, 9463.0], [86.6, 9465.0], [86.7, 9469.0], [86.8, 9475.0], [86.9, 9476.0], [87.0, 9491.0], [87.1, 9494.0], [87.2, 9498.0], [87.3, 9502.0], [87.4, 9503.0], [87.5, 9509.0], [87.6, 9510.0], [87.7, 9511.0], [87.8, 9513.0], [87.9, 9517.0], [88.0, 9520.0], [88.1, 9524.0], [88.2, 9525.0], [88.3, 9530.0], [88.4, 9543.0], [88.5, 9545.0], [88.6, 9545.0], [88.7, 9547.0], [88.8, 9549.0], [88.9, 9551.0], [89.0, 9554.0], [89.1, 9566.0], [89.2, 9567.0], [89.3, 9571.0], [89.4, 9571.0], [89.5, 9572.0], [89.6, 9575.0], [89.7, 9576.0], [89.8, 9578.0], [89.9, 9579.0], [90.0, 9580.0], [90.1, 9581.0], [90.2, 9581.0], [90.3, 9583.0], [90.4, 9585.0], [90.5, 9587.0], [90.6, 9594.0], [90.7, 9598.0], [90.8, 9600.0], [90.9, 9606.0], [91.0, 9606.0], [91.1, 9610.0], [91.2, 9611.0], [91.3, 9628.0], [91.4, 9630.0], [91.5, 9633.0], [91.6, 9633.0], [91.7, 9639.0], [91.8, 9641.0], [91.9, 9645.0], [92.0, 9645.0], [92.1, 9646.0], [92.2, 9657.0], [92.3, 9658.0], [92.4, 9659.0], [92.5, 9666.0], [92.6, 9672.0], [92.7, 9677.0], [92.8, 9680.0], [92.9, 9684.0], [93.0, 9684.0], [93.1, 9691.0], [93.2, 9694.0], [93.3, 9694.0], [93.4, 9701.0], [93.5, 9705.0], [93.6, 9707.0], [93.7, 9711.0], [93.8, 9715.0], [93.9, 9717.0], [94.0, 9719.0], [94.1, 9719.0], [94.2, 9722.0], [94.3, 9725.0], [94.4, 9725.0], [94.5, 9726.0], [94.6, 9727.0], [94.7, 9727.0], [94.8, 9734.0], [94.9, 9737.0], [95.0, 9738.0], [95.1, 9738.0], [95.2, 9738.0], [95.3, 9740.0], [95.4, 9756.0], [95.5, 9765.0], [95.6, 9772.0], [95.7, 9773.0], [95.8, 9778.0], [95.9, 9780.0], [96.0, 9790.0], [96.1, 9791.0], [96.2, 9792.0], [96.3, 9795.0], [96.4, 9797.0], [96.5, 9814.0], [96.6, 9816.0], [96.7, 9817.0], [96.8, 9818.0], [96.9, 9818.0], [97.0, 9819.0], [97.1, 9823.0], [97.2, 9825.0], [97.3, 9844.0], [97.4, 9845.0], [97.5, 9847.0], [97.6, 9863.0], [97.7, 9872.0], [97.8, 9876.0], [97.9, 9884.0], [98.0, 9885.0], [98.1, 9889.0], [98.2, 9890.0], [98.3, 9891.0], [98.4, 9892.0], [98.5, 9899.0], [98.6, 9901.0], [98.7, 9905.0], [98.8, 9905.0], [98.9, 9908.0], [99.0, 9910.0], [99.1, 9917.0], [99.2, 9922.0], [99.3, 9925.0], [99.4, 9932.0], [99.5, 9935.0], [99.6, 9936.0], [99.7, 9945.0], [99.8, 9949.0], [99.9, 9953.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 40.0, "series": [{"data": [[1100.0, 2.0], [1800.0, 1.0], [1900.0, 2.0], [2200.0, 2.0], [2400.0, 4.0], [2500.0, 1.0], [2600.0, 1.0], [2900.0, 1.0], [3300.0, 4.0], [3200.0, 2.0], [3400.0, 3.0], [3500.0, 15.0], [3600.0, 1.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 2.0], [4300.0, 3.0], [4100.0, 3.0], [4400.0, 10.0], [4500.0, 10.0], [4600.0, 2.0], [4700.0, 6.0], [4800.0, 11.0], [4900.0, 1.0], [5100.0, 10.0], [5200.0, 15.0], [5300.0, 19.0], [5400.0, 26.0], [5500.0, 8.0], [5600.0, 8.0], [5700.0, 6.0], [5800.0, 19.0], [5900.0, 2.0], [6100.0, 4.0], [6000.0, 2.0], [6300.0, 9.0], [6200.0, 12.0], [6400.0, 10.0], [6600.0, 28.0], [6500.0, 14.0], [6700.0, 40.0], [6800.0, 33.0], [6900.0, 22.0], [7000.0, 18.0], [7100.0, 14.0], [7200.0, 8.0], [7300.0, 12.0], [7400.0, 22.0], [7500.0, 13.0], [7600.0, 30.0], [7700.0, 28.0], [7800.0, 20.0], [7900.0, 18.0], [8000.0, 34.0], [8100.0, 22.0], [8400.0, 13.0], [8500.0, 19.0], [8300.0, 13.0], [8600.0, 15.0], [8700.0, 23.0], [8200.0, 6.0], [8800.0, 25.0], [8900.0, 22.0], [9000.0, 34.0], [9100.0, 15.0], [9200.0, 22.0], [9300.0, 21.0], [9400.0, 26.0], [9500.0, 35.0], [9600.0, 26.0], [9700.0, 31.0], [9800.0, 21.0], [9900.0, 14.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 998.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 998.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.64900000000114, "minX": 1.65374088E12, "maxY": 502.64900000000114, "series": [{"data": [[1.65374088E12, 502.64900000000114]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1121.0, "minX": 1.0, "maxY": 9953.0, "series": [{"data": [[2.0, 8967.0], [3.0, 9953.0], [4.0, 9814.0], [5.0, 8098.0], [6.0, 7597.0], [7.0, 9949.0], [8.0, 9792.0], [9.0, 9945.0], [10.0, 7585.0], [11.0, 9932.0], [12.0, 7584.0], [13.0, 9935.0], [14.0, 8946.0], [15.0, 9925.0], [16.0, 8735.0], [17.0, 6851.0], [18.0, 9936.0], [19.0, 9917.0], [20.0, 9910.0], [21.0, 8942.0], [22.0, 8651.0], [23.0, 9825.0], [24.0, 8855.0], [25.0, 9734.0], [26.0, 7179.0], [27.0, 9901.0], [28.0, 9922.0], [29.0, 9899.0], [30.0, 9725.0], [31.0, 9158.0], [33.0, 7173.0], [32.0, 9892.0], [35.0, 9908.0], [34.0, 9740.0], [37.0, 8470.0], [36.0, 9571.0], [39.0, 8587.0], [38.0, 8802.0], [41.0, 9905.0], [40.0, 7169.0], [42.0, 9889.0], [45.0, 8703.0], [44.0, 9213.0], [47.0, 8698.0], [46.0, 9844.0], [49.0, 9756.0], [48.0, 8701.0], [51.0, 9719.0], [50.0, 9905.0], [53.0, 9885.0], [52.0, 8794.0], [55.0, 9106.0], [57.0, 9787.5], [59.0, 9872.0], [58.0, 9823.0], [61.0, 9691.0], [60.0, 9694.0], [63.0, 9845.0], [62.0, 9863.0], [67.0, 8799.0], [66.0, 9884.0], [65.0, 9726.0], [64.0, 8777.0], [71.0, 9715.0], [70.0, 7200.0], [69.0, 8795.0], [68.0, 7139.0], [75.0, 9110.0], [74.0, 8386.0], [73.0, 9694.0], [72.0, 9847.0], [79.0, 9639.0], [78.0, 9817.0], [77.0, 9711.0], [76.0, 7491.0], [83.0, 9285.0], [81.0, 9727.0], [80.0, 9645.0], [87.0, 9797.0], [86.0, 8628.0], [85.0, 8732.0], [84.0, 7420.0], [91.0, 8796.0], [90.0, 9816.0], [89.0, 7433.0], [88.0, 7075.0], [95.0, 8333.0], [94.0, 8726.0], [93.0, 9572.0], [92.0, 8743.0], [99.0, 9819.0], [98.0, 9790.0], [97.0, 9659.0], [96.0, 7067.0], [103.0, 9611.0], [102.0, 8698.0], [101.0, 9795.0], [100.0, 9818.0], [107.0, 8589.0], [106.0, 9773.0], [105.0, 8699.0], [104.0, 9791.0], [111.0, 9657.0], [110.0, 9722.0], [109.0, 9780.0], [108.0, 9737.0], [115.0, 9315.0], [114.0, 9772.0], [113.0, 9778.0], [112.0, 7900.0], [119.0, 9765.0], [118.0, 8672.0], [117.0, 9587.0], [116.0, 8311.0], [122.0, 8548.0], [121.0, 7888.0], [120.0, 9585.0], [127.0, 9566.0], [126.0, 9581.0], [125.0, 9567.0], [124.0, 9658.0], [135.0, 9738.0], [134.0, 9441.0], [133.0, 8005.0], [132.0, 9119.0], [131.0, 9415.0], [130.0, 9719.0], [129.0, 9580.0], [128.0, 9549.0], [143.0, 9547.0], [142.0, 7856.0], [141.0, 9705.0], [140.0, 9738.0], [139.0, 9707.0], [138.0, 8665.0], [137.0, 8536.0], [136.0, 9571.0], [151.0, 9677.0], [150.0, 9511.0], [149.0, 9073.0], [148.0, 9545.0], [147.0, 9717.0], [146.0, 9554.0], [145.0, 9725.0], [144.0, 9701.0], [159.0, 7799.0], [158.0, 9510.0], [157.0, 8253.0], [156.0, 8593.0], [155.0, 9575.0], [154.0, 9684.0], [153.0, 9606.0], [152.0, 6958.0], [167.0, 9533.5], [163.0, 8139.0], [162.0, 9680.0], [161.0, 9503.0], [160.0, 9666.0], [175.0, 9392.0], [174.0, 9672.0], [173.0, 9658.0], [172.0, 9645.0], [171.0, 8362.0], [170.0, 9044.0], [169.0, 7797.0], [168.0, 8240.0], [183.0, 8662.0], [182.0, 9630.0], [181.0, 9465.0], [180.0, 9628.0], [179.0, 9549.5], [177.0, 9633.0], [176.0, 9641.0], [191.0, 9429.0], [190.0, 8553.0], [189.0, 9606.0], [188.0, 9422.0], [187.0, 9633.0], [186.0, 9600.0], [185.0, 7663.0], [184.0, 9448.0], [199.0, 8509.0], [198.0, 9579.0], [197.0, 8596.0], [196.0, 8532.0], [195.0, 7738.0], [194.0, 8411.0], [193.0, 9610.0], [192.0, 8609.0], [207.0, 9583.0], [206.0, 9576.0], [205.0, 8399.0], [204.0, 9594.0], [203.0, 9384.0], [202.0, 7727.0], [201.0, 9404.0], [200.0, 8059.0], [215.0, 9545.0], [214.0, 9402.0], [213.0, 8027.0], [212.0, 7695.0], [211.0, 6894.0], [210.0, 8092.0], [209.0, 9581.0], [208.0, 7719.0], [223.0, 9419.0], [222.0, 7671.0], [221.0, 9347.0], [220.0, 9325.0], [219.0, 8502.0], [218.0, 9543.0], [217.0, 9551.0], [216.0, 9517.0], [231.0, 8905.0], [230.0, 9284.0], [229.0, 9530.0], [228.0, 8505.0], [227.0, 8475.0], [226.0, 9520.0], [225.0, 9524.5], [239.0, 7621.0], [238.0, 9498.0], [237.0, 8029.0], [236.0, 9317.0], [235.0, 9366.0], [234.0, 9509.0], [233.0, 9513.0], [232.0, 9317.0], [247.0, 9362.0], [246.0, 8411.0], [245.0, 9452.5], [243.0, 8452.5], [241.0, 8175.5], [255.0, 8021.0], [254.0, 9491.0], [253.0, 9222.0], [252.0, 8950.0], [250.0, 9494.0], [249.0, 9336.0], [248.0, 9502.0], [270.0, 9391.0], [271.0, 9446.0], [269.0, 8258.0], [268.0, 9266.0], [267.0, 9331.0], [266.0, 8253.0], [265.0, 8264.0], [264.0, 9447.0], [263.0, 7516.0], [256.0, 9286.0], [259.0, 9458.0], [258.0, 8106.5], [262.0, 9313.0], [261.0, 9280.0], [260.0, 8395.0], [287.0, 8361.0], [285.0, 9330.0], [275.0, 9448.0], [274.0, 9447.0], [273.0, 7979.0], [272.0, 7071.0], [283.0, 9399.0], [282.0, 8360.0], [281.0, 7041.0], [280.0, 9258.0], [279.0, 6698.0], [278.0, 9294.0], [277.0, 9279.0], [276.0, 7971.0], [302.0, 9317.0], [303.0, 8195.0], [301.0, 9169.0], [300.0, 8088.0], [299.0, 9278.0], [298.0, 9376.0], [297.0, 9389.0], [296.0, 7509.0], [295.0, 9392.0], [289.0, 9420.0], [288.0, 9411.0], [291.0, 9269.0], [290.0, 9212.0], [294.0, 9306.0], [293.0, 9388.0], [292.0, 6683.0], [318.0, 9071.0], [319.0, 8167.0], [317.0, 9072.0], [316.0, 9060.0], [315.0, 9053.0], [314.0, 9271.0], [313.0, 9256.0], [312.0, 9244.0], [311.0, 9125.0], [305.0, 8088.0], [304.0, 9131.0], [307.0, 9256.0], [306.0, 9083.0], [310.0, 7792.0], [309.0, 9262.0], [308.0, 9258.0], [334.0, 9191.5], [335.0, 8004.0], [332.0, 8563.0], [322.0, 9039.0], [321.0, 8030.0], [320.0, 8139.0], [330.0, 9141.0], [329.0, 9200.0], [328.0, 9047.0], [327.0, 6821.0], [326.0, 9209.0], [325.0, 8023.0], [324.0, 8639.0], [350.0, 9047.0], [351.0, 8040.0], [349.0, 9071.0], [348.0, 9142.0], [347.0, 9156.0], [346.0, 8924.0], [345.0, 8989.0], [344.0, 8958.0], [343.0, 7963.0], [337.0, 7736.0], [336.0, 6444.0], [339.0, 8991.0], [338.0, 9163.0], [342.0, 6758.0], [341.0, 8905.0], [340.0, 9171.0], [355.0, 9117.0], [366.0, 7977.0], [367.0, 8982.0], [364.0, 8970.0], [353.0, 9129.0], [352.0, 8104.0], [361.0, 8036.0], [360.0, 8505.0], [359.0, 8969.0], [358.0, 8046.0], [357.0, 6442.0], [356.0, 8957.0], [382.0, 8012.0], [383.0, 8003.0], [381.0, 8922.0], [380.0, 8808.0], [379.0, 8865.0], [378.0, 9065.0], [377.0, 9098.0], [376.0, 9088.0], [374.0, 9043.0], [369.0, 8981.0], [368.0, 8929.0], [371.0, 7608.0], [370.0, 8049.0], [373.0, 9096.0], [372.0, 8941.0], [398.0, 9064.0], [399.0, 7999.0], [397.0, 9082.0], [396.0, 9081.0], [395.0, 9038.0], [394.0, 9075.0], [393.0, 9099.0], [392.0, 8912.0], [391.0, 7216.0], [385.0, 8902.0], [384.0, 9098.0], [387.0, 8888.0], [386.0, 9086.0], [390.0, 9070.0], [389.0, 8919.5], [403.0, 8886.0], [414.0, 9022.0], [413.0, 8867.0], [402.0, 8052.0], [401.0, 9061.0], [400.0, 9062.0], [411.0, 8897.0], [410.0, 9041.0], [409.0, 7974.0], [407.0, 9062.0], [406.0, 9060.0], [405.0, 8872.0], [404.0, 9057.0], [419.0, 8746.0], [431.0, 8709.0], [428.0, 8713.0], [427.0, 7435.0], [426.0, 6782.0], [425.0, 8888.0], [422.0, 8897.0], [421.0, 8722.0], [420.0, 7818.0], [418.0, 8830.0], [417.0, 8925.0], [416.0, 7837.0], [447.0, 8248.0], [445.0, 8860.0], [443.0, 8399.0], [439.0, 8837.0], [438.0, 8328.5], [436.0, 8838.0], [433.0, 8860.0], [432.0, 7838.0], [462.0, 8688.0], [463.0, 6944.0], [461.0, 8797.0], [451.0, 8830.0], [450.0, 8857.0], [449.0, 8853.0], [448.0, 8716.0], [459.0, 7625.0], [457.0, 8768.0], [456.0, 8841.0], [455.0, 7778.0], [454.0, 8722.0], [453.0, 8834.0], [452.0, 7788.0], [478.0, 8557.0], [479.0, 8692.0], [477.0, 7678.0], [467.0, 8660.0], [466.0, 8676.0], [465.0, 8659.0], [464.0, 8216.0], [474.0, 8736.0], [473.0, 8764.0], [472.0, 8594.0], [470.0, 8808.0], [469.0, 7806.0], [468.0, 8189.0], [494.0, 7156.0], [495.0, 8156.0], [493.0, 8150.0], [492.0, 8182.0], [491.0, 7616.875000000001], [490.0, 8230.125], [489.0, 8503.0], [488.0, 8429.0], [487.0, 8566.0], [481.0, 7638.0], [480.0, 8500.0], [483.0, 8476.0], [482.0, 7596.0], [486.0, 8498.0], [485.0, 8594.0], [484.0, 7365.0], [508.0, 7096.0], [510.0, 8115.0], [511.0, 8136.0], [509.0, 8088.0], [507.0, 8108.5], [505.0, 8005.0], [503.0, 7958.0], [496.0, 7084.0], [499.0, 8000.0], [498.0, 7647.5], [502.0, 8121.0], [501.0, 8122.0], [500.0, 8121.0], [540.0, 6223.0], [543.0, 7959.0], [529.0, 7864.0], [528.0, 7878.0], [531.0, 7996.0], [530.0, 8025.0], [533.0, 7987.0], [532.0, 8007.0], [542.0, 7821.0], [541.0, 7969.0], [539.0, 6645.0], [538.0, 6425.0], [537.0, 6901.0], [536.0, 7996.0], [527.0, 7862.0], [513.0, 8055.0], [512.0, 8070.0], [515.0, 7798.0], [514.0, 6528.0], [517.0, 5737.0], [516.0, 7889.0], [519.0, 7723.5], [518.0, 8001.0], [526.0, 7854.0], [525.0, 7688.5], [524.0, 8015.0], [523.0, 7003.0], [522.0, 7897.0], [521.0, 6306.0], [520.0, 7890.0], [535.0, 7979.0], [534.0, 7869.0], [572.0, 7768.0], [575.0, 7790.0], [561.0, 7796.0], [563.0, 7739.0], [562.0, 7870.0], [565.0, 7821.0], [564.0, 7649.0], [574.0, 7785.0], [573.0, 7600.0], [571.0, 7791.0], [570.0, 7777.0], [569.0, 7381.0], [568.0, 7664.0], [559.0, 7715.0], [545.0, 6218.0], [544.0, 7948.0], [547.0, 6412.0], [546.0, 6216.0], [549.0, 7782.0], [548.0, 6214.0], [551.0, 6216.0], [550.0, 7943.0], [558.0, 7769.0], [557.0, 7906.0], [556.0, 7767.0], [555.0, 7761.0], [554.0, 7684.0], [553.0, 6895.0], [552.0, 6214.0], [567.0, 6602.0], [566.0, 7826.0], [604.0, 7603.0], [607.0, 6636.0], [592.0, 7644.0], [594.0, 7621.0], [593.0, 7620.0], [596.0, 7609.0], [595.0, 7612.0], [606.0, 7479.0], [605.0, 7642.0], [603.0, 7378.0], [602.0, 7626.0], [601.0, 7530.0], [600.0, 7609.0], [591.0, 7647.0], [577.0, 7765.0], [576.0, 7571.0], [579.0, 7753.0], [578.0, 7738.0], [581.0, 7669.0], [580.0, 7735.0], [583.0, 7495.0], [582.0, 7503.0], [590.0, 7656.0], [589.0, 7488.0], [588.0, 7617.0], [587.0, 7618.0], [586.0, 7505.0], [585.0, 7473.0], [584.0, 6380.0], [599.0, 7637.0], [598.0, 7513.0], [636.0, 7448.0], [639.0, 7384.0], [625.0, 7279.0], [624.0, 6195.0], [627.0, 7336.0], [626.0, 7481.0], [629.0, 7302.0], [628.0, 6212.0], [638.0, 7401.0], [637.0, 7444.0], [635.0, 7188.0], [634.0, 5121.0], [633.0, 7347.0], [632.0, 7278.0], [623.0, 7480.0], [609.0, 7327.0], [608.0, 7004.0], [611.0, 7620.0], [610.0, 7610.0], [613.0, 7505.0], [612.0, 6396.0], [615.0, 7494.0], [614.0, 7314.0], [622.0, 7470.0], [621.0, 6483.0], [620.0, 7504.0], [619.0, 7492.0], [618.0, 6857.0], [617.0, 7377.0], [616.0, 7492.0], [631.0, 7444.0], [630.0, 7198.0], [665.0, 7011.5], [669.0, 6824.0], [670.0, 6911.0], [659.0, 6877.0], [657.0, 6960.0], [661.0, 6834.0], [660.0, 7010.0], [668.0, 6390.0], [667.0, 7001.0], [666.0, 7014.0], [664.0, 7022.0], [647.0, 7292.0], [646.0, 6281.0], [644.0, 7199.0], [643.0, 7291.0], [642.0, 6018.0], [641.0, 7330.0], [640.0, 7180.0], [655.0, 6859.0], [654.0, 5833.0], [653.0, 7044.0], [652.0, 7057.0], [651.0, 7149.0], [650.0, 7130.0], [649.0, 7198.0], [648.0, 6497.0], [663.0, 6850.0], [662.0, 6744.0], [697.0, 6899.5], [702.0, 6213.0], [703.0, 6717.0], [688.0, 6808.0], [690.0, 5992.0], [689.0, 6330.0], [692.0, 6647.0], [691.0, 6984.0], [701.0, 6748.0], [700.0, 6946.0], [699.0, 6950.0], [696.0, 6816.0], [679.0, 6971.0], [678.0, 6742.0], [677.0, 6758.0], [676.0, 6982.0], [675.0, 6966.0], [674.0, 6875.0], [673.0, 6981.0], [672.0, 6941.5], [687.0, 6959.0], [686.0, 6989.0], [685.0, 6960.0], [683.0, 6914.5], [681.0, 6976.0], [680.0, 6379.0], [695.0, 6876.0], [694.0, 6338.0], [732.0, 6574.0], [735.0, 6808.0], [720.0, 6851.0], [722.0, 6721.0], [721.0, 6231.0], [725.0, 6424.0], [724.0, 6151.5], [734.0, 6635.0], [733.0, 6832.0], [731.0, 6821.0], [730.0, 6625.0], [729.0, 6777.0], [728.0, 6850.0], [719.0, 6674.0], [705.0, 6913.0], [704.0, 6798.0], [707.0, 6891.0], [706.0, 6723.0], [709.0, 6277.0], [708.0, 6915.0], [711.0, 6715.0], [710.0, 6801.0], [718.0, 6856.0], [717.0, 6699.0], [716.0, 6877.0], [715.0, 5668.0], [714.0, 6704.0], [713.0, 6870.0], [712.0, 6881.0], [727.0, 6840.0], [726.0, 6850.0], [764.0, 6560.0], [767.0, 6723.0], [752.0, 6765.0], [754.0, 6570.0], [753.0, 5560.0], [756.0, 6758.0], [755.0, 6755.0], [766.0, 6736.0], [765.0, 5537.0], [763.0, 5548.0], [762.0, 6744.0], [761.0, 6752.0], [760.0, 6427.0], [751.0, 6746.0], [736.0, 6629.0], [738.0, 6795.0], [737.0, 6170.0], [741.0, 6650.0], [740.0, 6816.0], [743.0, 6652.0], [742.0, 6793.0], [750.0, 5557.0], [749.0, 6792.0], [748.0, 6798.0], [747.0, 6785.0], [746.0, 5601.0], [745.0, 6783.0], [744.0, 6794.0], [758.0, 6743.0], [757.0, 6581.0], [793.0, 6616.0], [798.0, 6612.0], [799.0, 6640.0], [784.0, 6507.0], [787.0, 6602.5], [785.0, 6696.0], [789.0, 6646.0], [788.0, 6632.0], [796.0, 6567.0], [795.0, 5617.0], [794.0, 6510.0], [792.0, 6427.0], [775.0, 6730.0], [774.0, 5465.0], [773.0, 6709.0], [772.0, 6717.0], [771.0, 6708.0], [770.0, 6729.0], [769.0, 6711.0], [768.0, 6716.0], [783.0, 6509.0], [782.0, 6694.0], [781.0, 6524.0], [780.0, 6678.0], [779.0, 5193.0], [778.0, 6591.5], [776.0, 6571.0], [791.0, 6659.0], [790.0, 6672.0], [825.0, 5258.0], [830.0, 4813.0], [831.0, 5818.0], [816.0, 4833.0], [818.0, 4865.0], [817.0, 4858.0], [820.0, 4856.0], [819.0, 4830.0], [829.0, 5818.0], [828.0, 5169.0], [826.0, 5821.0], [824.0, 5861.0], [807.0, 6215.0], [806.0, 6103.0], [805.0, 6450.0], [804.0, 6623.0], [803.0, 6628.0], [802.0, 6321.0], [801.0, 6631.0], [800.0, 6487.0], [815.0, 5881.0], [814.0, 5709.0], [813.0, 5871.0], [812.0, 5883.0], [811.0, 5735.0], [810.0, 5901.0], [809.0, 5806.0], [808.0, 6382.0], [822.0, 4881.0], [821.0, 5847.0], [838.0, 5803.0], [850.0, 5757.0], [848.0, 5755.0], [845.0, 5810.0], [833.0, 5823.0], [832.0, 5850.0], [835.0, 5694.0], [834.0, 5815.0], [844.0, 5676.0], [843.0, 4814.0], [841.0, 5155.5], [839.0, 5803.0], [837.0, 5808.0], [836.0, 5815.0], [892.0, 4133.0], [895.0, 5410.0], [881.0, 5415.0], [880.0, 5416.0], [883.0, 5411.0], [882.0, 4814.0], [885.0, 5401.0], [884.0, 5160.0], [894.0, 5390.0], [893.0, 5372.0], [891.0, 5390.0], [890.0, 4766.0], [889.0, 5403.0], [888.0, 5261.0], [879.0, 5428.0], [878.0, 5274.774193548387], [887.0, 5406.0], [886.0, 5276.0], [924.0, 5209.0], [927.0, 5103.0], [913.0, 5215.0], [912.0, 5377.0], [915.0, 5377.0], [914.0, 5401.0], [917.0, 4142.0], [916.0, 5188.0], [926.0, 5279.0], [925.0, 5286.0], [923.0, 5279.0], [922.0, 5291.0], [921.0, 5287.0], [920.0, 5135.0], [911.0, 5195.0], [896.0, 5227.0], [898.0, 5387.0], [897.0, 5406.0], [901.0, 5294.0], [899.0, 5345.0], [903.0, 5405.0], [902.0, 4400.0], [910.0, 4759.0], [909.0, 5412.0], [908.0, 5373.0], [906.0, 5401.0], [905.0, 5154.0], [904.0, 5383.0], [919.0, 5323.0], [918.0, 5359.0], [956.0, 4065.0], [959.0, 2950.0], [945.0, 4448.0], [944.0, 4580.0], [947.0, 4383.0], [946.0, 4567.0], [949.0, 4483.0], [948.0, 4543.0], [958.0, 4006.0], [957.0, 3893.0], [955.0, 3945.0], [954.0, 3488.0], [953.0, 4493.0], [952.0, 4337.0], [943.0, 4422.0], [929.0, 5263.0], [928.0, 4655.0], [931.0, 4901.0], [930.0, 5236.0], [933.0, 4742.0], [932.0, 4779.0], [935.0, 4136.0], [934.0, 4749.0], [942.0, 4479.0], [941.0, 4680.0], [940.0, 4512.0], [939.0, 4548.0], [938.0, 4557.0], [937.0, 4558.0], [936.0, 4728.0], [951.0, 4517.0], [950.0, 4357.0], [972.0, 3601.0], [973.0, 3549.0], [960.0, 2661.0], [971.0, 1121.0], [970.0, 3784.0], [969.0, 3360.0], [968.0, 3535.0], [966.0, 3519.0], [965.0, 3308.0], [964.0, 3831.0], [963.0, 3427.0], [962.0, 3893.0], [961.0, 3775.0], [1000.0, 2939.4074074074074], [1.0, 9890.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[502.64900000000114, 7479.603999999998]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2183.3333333333335, "minX": 1.65374088E12, "maxY": 20231.7, "series": [{"data": [[1.65374088E12, 20231.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65374088E12, 2183.3333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7479.603999999998, "minX": 1.65374088E12, "maxY": 7479.603999999998, "series": [{"data": [[1.65374088E12, 7479.603999999998]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7476.509999999996, "minX": 1.65374088E12, "maxY": 7476.509999999996, "series": [{"data": [[1.65374088E12, 7476.509999999996]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6231.276999999996, "minX": 1.65374088E12, "maxY": 6231.276999999996, "series": [{"data": [[1.65374088E12, 6231.276999999996]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1121.0, "minX": 1.65374088E12, "maxY": 9953.0, "series": [{"data": [[1.65374088E12, 9953.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65374088E12, 9579.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65374088E12, 9909.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65374088E12, 9737.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65374088E12, 1121.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65374088E12, 7723.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3438.5, "minX": 34.0, "maxY": 9713.0, "series": [{"data": [[34.0, 3438.5], [35.0, 4422.0], [167.0, 6992.0], [80.0, 9713.0], [362.0, 9061.5], [98.0, 5375.5], [101.0, 6570.0], [123.0, 7959.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 362.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3353.5, "minX": 34.0, "maxY": 9712.5, "series": [{"data": [[34.0, 3353.5], [35.0, 4422.0], [167.0, 6992.0], [80.0, 9712.5], [362.0, 9060.5], [98.0, 5375.5], [101.0, 6570.0], [123.0, 7959.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 362.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374088E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374088E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374088E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374088E12, 16.666666666666668]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374088E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

