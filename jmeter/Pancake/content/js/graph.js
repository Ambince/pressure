/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 19728.0, "minX": 0.0, "maxY": 23929.0, "series": [{"data": [[0.0, 19728.0], [0.1, 19731.0], [0.2, 19749.0], [0.3, 19749.0], [0.4, 19916.0], [0.5, 19939.0], [0.6, 19942.0], [0.7, 19953.0], [0.8, 19961.0], [0.9, 19973.0], [1.0, 19984.0], [1.1, 19993.0], [1.2, 20018.0], [1.3, 20051.0], [1.4, 20051.0], [1.5, 20072.0], [1.6, 20092.0], [1.7, 20101.0], [1.8, 20103.0], [1.9, 20104.0], [2.0, 20105.0], [2.1, 20112.0], [2.2, 20113.0], [2.3, 20118.0], [2.4, 20124.0], [2.5, 20133.0], [2.6, 20133.0], [2.7, 20136.0], [2.8, 20142.0], [2.9, 20153.0], [3.0, 20181.0], [3.1, 20186.0], [3.2, 20193.0], [3.3, 20210.0], [3.4, 20241.0], [3.5, 20245.0], [3.6, 20256.0], [3.7, 20257.0], [3.8, 20277.0], [3.9, 20279.0], [4.0, 20292.0], [4.1, 20292.0], [4.2, 20300.0], [4.3, 20300.0], [4.4, 20311.0], [4.5, 20332.0], [4.6, 20334.0], [4.7, 20348.0], [4.8, 20355.0], [4.9, 20413.0], [5.0, 20418.0], [5.1, 20420.0], [5.2, 20423.0], [5.3, 20436.0], [5.4, 20437.0], [5.5, 20439.0], [5.6, 20447.0], [5.7, 20448.0], [5.8, 20456.0], [5.9, 20462.0], [6.0, 20462.0], [6.1, 20463.0], [6.2, 20464.0], [6.3, 20465.0], [6.4, 20467.0], [6.5, 20468.0], [6.6, 20470.0], [6.7, 20474.0], [6.8, 20486.0], [6.9, 20487.0], [7.0, 20490.0], [7.1, 20493.0], [7.2, 20497.0], [7.3, 20498.0], [7.4, 20501.0], [7.5, 20507.0], [7.6, 20507.0], [7.7, 20508.0], [7.8, 20511.0], [7.9, 20513.0], [8.0, 20513.0], [8.1, 20514.0], [8.2, 20523.0], [8.3, 20523.0], [8.4, 20526.0], [8.5, 20527.0], [8.6, 20530.0], [8.7, 20542.0], [8.8, 20546.0], [8.9, 20553.0], [9.0, 20565.0], [9.1, 20568.0], [9.2, 20574.0], [9.3, 20577.0], [9.4, 20588.0], [9.5, 20602.0], [9.6, 20604.0], [9.7, 20609.0], [9.8, 20610.0], [9.9, 20614.0], [10.0, 20627.0], [10.1, 20627.0], [10.2, 20628.0], [10.3, 20630.0], [10.4, 20631.0], [10.5, 20640.0], [10.6, 20644.0], [10.7, 20646.0], [10.8, 20651.0], [10.9, 20653.0], [11.0, 20653.0], [11.1, 20657.0], [11.2, 20657.0], [11.3, 20661.0], [11.4, 20663.0], [11.5, 20663.0], [11.6, 20668.0], [11.7, 20669.0], [11.8, 20669.0], [11.9, 20685.0], [12.0, 20692.0], [12.1, 20700.0], [12.2, 20703.0], [12.3, 20707.0], [12.4, 20712.0], [12.5, 20720.0], [12.6, 20736.0], [12.7, 20737.0], [12.8, 20739.0], [12.9, 20745.0], [13.0, 20745.0], [13.1, 20748.0], [13.2, 20751.0], [13.3, 20759.0], [13.4, 20766.0], [13.5, 20772.0], [13.6, 20777.0], [13.7, 20780.0], [13.8, 20790.0], [13.9, 20794.0], [14.0, 20795.0], [14.1, 20795.0], [14.2, 20800.0], [14.3, 20804.0], [14.4, 20807.0], [14.5, 20809.0], [14.6, 20814.0], [14.7, 20824.0], [14.8, 20849.0], [14.9, 20850.0], [15.0, 20853.0], [15.1, 20861.0], [15.2, 20863.0], [15.3, 20872.0], [15.4, 20878.0], [15.5, 20885.0], [15.6, 20886.0], [15.7, 20886.0], [15.8, 20887.0], [15.9, 20901.0], [16.0, 20904.0], [16.1, 20911.0], [16.2, 20911.0], [16.3, 20926.0], [16.4, 20927.0], [16.5, 20928.0], [16.6, 20936.0], [16.7, 20949.0], [16.8, 20955.0], [16.9, 20969.0], [17.0, 20973.0], [17.1, 20974.0], [17.2, 20975.0], [17.3, 20976.0], [17.4, 20976.0], [17.5, 20978.0], [17.6, 20979.0], [17.7, 20981.0], [17.8, 20984.0], [17.9, 20988.0], [18.0, 20993.0], [18.1, 20995.0], [18.2, 20999.0], [18.3, 20999.0], [18.4, 21000.0], [18.5, 21001.0], [18.6, 21002.0], [18.7, 21003.0], [18.8, 21004.0], [18.9, 21012.0], [19.0, 21026.0], [19.1, 21027.0], [19.2, 21027.0], [19.3, 21028.0], [19.4, 21035.0], [19.5, 21038.0], [19.6, 21039.0], [19.7, 21040.0], [19.8, 21041.0], [19.9, 21041.0], [20.0, 21043.0], [20.1, 21044.0], [20.2, 21048.0], [20.3, 21048.0], [20.4, 21049.0], [20.5, 21056.0], [20.6, 21061.0], [20.7, 21066.0], [20.8, 21071.0], [20.9, 21072.0], [21.0, 21078.0], [21.1, 21078.0], [21.2, 21086.0], [21.3, 21095.0], [21.4, 21107.0], [21.5, 21111.0], [21.6, 21114.0], [21.7, 21122.0], [21.8, 21123.0], [21.9, 21129.0], [22.0, 21130.0], [22.1, 21132.0], [22.2, 21138.0], [22.3, 21140.0], [22.4, 21154.0], [22.5, 21154.0], [22.6, 21168.0], [22.7, 21173.0], [22.8, 21178.0], [22.9, 21179.0], [23.0, 21197.0], [23.1, 21202.0], [23.2, 21204.0], [23.3, 21208.0], [23.4, 21209.0], [23.5, 21209.0], [23.6, 21212.0], [23.7, 21213.0], [23.8, 21213.0], [23.9, 21219.0], [24.0, 21222.0], [24.1, 21223.0], [24.2, 21226.0], [24.3, 21228.0], [24.4, 21230.0], [24.5, 21231.0], [24.6, 21241.0], [24.7, 21241.0], [24.8, 21241.0], [24.9, 21246.0], [25.0, 21248.0], [25.1, 21255.0], [25.2, 21257.0], [25.3, 21258.0], [25.4, 21261.0], [25.5, 21265.0], [25.6, 21269.0], [25.7, 21270.0], [25.8, 21274.0], [25.9, 21274.0], [26.0, 21286.0], [26.1, 21288.0], [26.2, 21289.0], [26.3, 21290.0], [26.4, 21301.0], [26.5, 21305.0], [26.6, 21307.0], [26.7, 21310.0], [26.8, 21313.0], [26.9, 21318.0], [27.0, 21323.0], [27.1, 21327.0], [27.2, 21327.0], [27.3, 21330.0], [27.4, 21334.0], [27.5, 21335.0], [27.6, 21335.0], [27.7, 21336.0], [27.8, 21338.0], [27.9, 21339.0], [28.0, 21342.0], [28.1, 21342.0], [28.2, 21348.0], [28.3, 21351.0], [28.4, 21358.0], [28.5, 21360.0], [28.6, 21372.0], [28.7, 21379.0], [28.8, 21380.0], [28.9, 21380.0], [29.0, 21386.0], [29.1, 21387.0], [29.2, 21389.0], [29.3, 21397.0], [29.4, 21402.0], [29.5, 21404.0], [29.6, 21411.0], [29.7, 21412.0], [29.8, 21416.0], [29.9, 21416.0], [30.0, 21422.0], [30.1, 21427.0], [30.2, 21432.0], [30.3, 21437.0], [30.4, 21438.0], [30.5, 21441.0], [30.6, 21442.0], [30.7, 21446.0], [30.8, 21447.0], [30.9, 21450.0], [31.0, 21455.0], [31.1, 21459.0], [31.2, 21462.0], [31.3, 21465.0], [31.4, 21467.0], [31.5, 21470.0], [31.6, 21472.0], [31.7, 21473.0], [31.8, 21474.0], [31.9, 21475.0], [32.0, 21497.0], [32.1, 21500.0], [32.2, 21501.0], [32.3, 21502.0], [32.4, 21504.0], [32.5, 21507.0], [32.6, 21511.0], [32.7, 21513.0], [32.8, 21514.0], [32.9, 21516.0], [33.0, 21518.0], [33.1, 21525.0], [33.2, 21527.0], [33.3, 21528.0], [33.4, 21538.0], [33.5, 21538.0], [33.6, 21540.0], [33.7, 21544.0], [33.8, 21547.0], [33.9, 21548.0], [34.0, 21551.0], [34.1, 21553.0], [34.2, 21557.0], [34.3, 21560.0], [34.4, 21563.0], [34.5, 21564.0], [34.6, 21565.0], [34.7, 21569.0], [34.8, 21578.0], [34.9, 21579.0], [35.0, 21579.0], [35.1, 21589.0], [35.2, 21591.0], [35.3, 21600.0], [35.4, 21601.0], [35.5, 21610.0], [35.6, 21614.0], [35.7, 21621.0], [35.8, 21621.0], [35.9, 21621.0], [36.0, 21627.0], [36.1, 21634.0], [36.2, 21636.0], [36.3, 21637.0], [36.4, 21637.0], [36.5, 21638.0], [36.6, 21640.0], [36.7, 21647.0], [36.8, 21651.0], [36.9, 21657.0], [37.0, 21664.0], [37.1, 21664.0], [37.2, 21666.0], [37.3, 21668.0], [37.4, 21670.0], [37.5, 21673.0], [37.6, 21676.0], [37.7, 21682.0], [37.8, 21684.0], [37.9, 21688.0], [38.0, 21689.0], [38.1, 21692.0], [38.2, 21697.0], [38.3, 21701.0], [38.4, 21704.0], [38.5, 21711.0], [38.6, 21714.0], [38.7, 21717.0], [38.8, 21723.0], [38.9, 21727.0], [39.0, 21728.0], [39.1, 21738.0], [39.2, 21739.0], [39.3, 21745.0], [39.4, 21756.0], [39.5, 21758.0], [39.6, 21760.0], [39.7, 21764.0], [39.8, 21778.0], [39.9, 21783.0], [40.0, 21789.0], [40.1, 21790.0], [40.2, 21796.0], [40.3, 21797.0], [40.4, 21798.0], [40.5, 21801.0], [40.6, 21803.0], [40.7, 21810.0], [40.8, 21811.0], [40.9, 21812.0], [41.0, 21817.0], [41.1, 21834.0], [41.2, 21834.0], [41.3, 21835.0], [41.4, 21850.0], [41.5, 21853.0], [41.6, 21854.0], [41.7, 21866.0], [41.8, 21867.0], [41.9, 21868.0], [42.0, 21869.0], [42.1, 21873.0], [42.2, 21875.0], [42.3, 21875.0], [42.4, 21876.0], [42.5, 21883.0], [42.6, 21889.0], [42.7, 21895.0], [42.8, 21896.0], [42.9, 21897.0], [43.0, 21898.0], [43.1, 21898.0], [43.2, 21899.0], [43.3, 21903.0], [43.4, 21909.0], [43.5, 21914.0], [43.6, 21920.0], [43.7, 21925.0], [43.8, 21931.0], [43.9, 21934.0], [44.0, 21934.0], [44.1, 21935.0], [44.2, 21945.0], [44.3, 21957.0], [44.4, 21961.0], [44.5, 21969.0], [44.6, 21971.0], [44.7, 21972.0], [44.8, 21972.0], [44.9, 21974.0], [45.0, 21974.0], [45.1, 21976.0], [45.2, 21978.0], [45.3, 21979.0], [45.4, 21980.0], [45.5, 21986.0], [45.6, 21986.0], [45.7, 21987.0], [45.8, 21989.0], [45.9, 21991.0], [46.0, 22005.0], [46.1, 22007.0], [46.2, 22009.0], [46.3, 22013.0], [46.4, 22014.0], [46.5, 22016.0], [46.6, 22016.0], [46.7, 22016.0], [46.8, 22022.0], [46.9, 22023.0], [47.0, 22027.0], [47.1, 22029.0], [47.2, 22030.0], [47.3, 22033.0], [47.4, 22036.0], [47.5, 22036.0], [47.6, 22040.0], [47.7, 22044.0], [47.8, 22045.0], [47.9, 22046.0], [48.0, 22048.0], [48.1, 22053.0], [48.2, 22054.0], [48.3, 22054.0], [48.4, 22061.0], [48.5, 22065.0], [48.6, 22068.0], [48.7, 22068.0], [48.8, 22069.0], [48.9, 22071.0], [49.0, 22074.0], [49.1, 22077.0], [49.2, 22091.0], [49.3, 22092.0], [49.4, 22093.0], [49.5, 22100.0], [49.6, 22100.0], [49.7, 22101.0], [49.8, 22101.0], [49.9, 22102.0], [50.0, 22103.0], [50.1, 22107.0], [50.2, 22108.0], [50.3, 22109.0], [50.4, 22111.0], [50.5, 22112.0], [50.6, 22113.0], [50.7, 22127.0], [50.8, 22130.0], [50.9, 22130.0], [51.0, 22131.0], [51.1, 22134.0], [51.2, 22137.0], [51.3, 22143.0], [51.4, 22148.0], [51.5, 22150.0], [51.6, 22151.0], [51.7, 22154.0], [51.8, 22155.0], [51.9, 22156.0], [52.0, 22159.0], [52.1, 22163.0], [52.2, 22168.0], [52.3, 22169.0], [52.4, 22169.0], [52.5, 22171.0], [52.6, 22172.0], [52.7, 22179.0], [52.8, 22182.0], [52.9, 22205.0], [53.0, 22211.0], [53.1, 22212.0], [53.2, 22214.0], [53.3, 22221.0], [53.4, 22228.0], [53.5, 22228.0], [53.6, 22233.0], [53.7, 22251.0], [53.8, 22255.0], [53.9, 22260.0], [54.0, 22262.0], [54.1, 22269.0], [54.2, 22273.0], [54.3, 22278.0], [54.4, 22283.0], [54.5, 22286.0], [54.6, 22288.0], [54.7, 22292.0], [54.8, 22294.0], [54.9, 22301.0], [55.0, 22304.0], [55.1, 22312.0], [55.2, 22315.0], [55.3, 22316.0], [55.4, 22320.0], [55.5, 22330.0], [55.6, 22336.0], [55.7, 22343.0], [55.8, 22345.0], [55.9, 22348.0], [56.0, 22353.0], [56.1, 22359.0], [56.2, 22363.0], [56.3, 22365.0], [56.4, 22366.0], [56.5, 22366.0], [56.6, 22367.0], [56.7, 22370.0], [56.8, 22370.0], [56.9, 22371.0], [57.0, 22380.0], [57.1, 22382.0], [57.2, 22383.0], [57.3, 22390.0], [57.4, 22392.0], [57.5, 22393.0], [57.6, 22400.0], [57.7, 22412.0], [57.8, 22416.0], [57.9, 22420.0], [58.0, 22427.0], [58.1, 22429.0], [58.2, 22433.0], [58.3, 22437.0], [58.4, 22449.0], [58.5, 22449.0], [58.6, 22451.0], [58.7, 22459.0], [58.8, 22462.0], [58.9, 22465.0], [59.0, 22465.0], [59.1, 22469.0], [59.2, 22474.0], [59.3, 22481.0], [59.4, 22489.0], [59.5, 22494.0], [59.6, 22494.0], [59.7, 22498.0], [59.8, 22501.0], [59.9, 22514.0], [60.0, 22516.0], [60.1, 22517.0], [60.2, 22522.0], [60.3, 22524.0], [60.4, 22525.0], [60.5, 22531.0], [60.6, 22537.0], [60.7, 22538.0], [60.8, 22540.0], [60.9, 22542.0], [61.0, 22542.0], [61.1, 22544.0], [61.2, 22547.0], [61.3, 22551.0], [61.4, 22551.0], [61.5, 22554.0], [61.6, 22558.0], [61.7, 22558.0], [61.8, 22561.0], [61.9, 22563.0], [62.0, 22564.0], [62.1, 22576.0], [62.2, 22577.0], [62.3, 22578.0], [62.4, 22578.0], [62.5, 22588.0], [62.6, 22594.0], [62.7, 22595.0], [62.8, 22597.0], [62.9, 22598.0], [63.0, 22600.0], [63.1, 22601.0], [63.2, 22608.0], [63.3, 22611.0], [63.4, 22615.0], [63.5, 22616.0], [63.6, 22619.0], [63.7, 22621.0], [63.8, 22630.0], [63.9, 22633.0], [64.0, 22636.0], [64.1, 22636.0], [64.2, 22652.0], [64.3, 22655.0], [64.4, 22655.0], [64.5, 22657.0], [64.6, 22660.0], [64.7, 22666.0], [64.8, 22669.0], [64.9, 22681.0], [65.0, 22688.0], [65.1, 22689.0], [65.2, 22691.0], [65.3, 22695.0], [65.4, 22698.0], [65.5, 22699.0], [65.6, 22703.0], [65.7, 22706.0], [65.8, 22707.0], [65.9, 22707.0], [66.0, 22715.0], [66.1, 22716.0], [66.2, 22720.0], [66.3, 22729.0], [66.4, 22732.0], [66.5, 22734.0], [66.6, 22736.0], [66.7, 22739.0], [66.8, 22741.0], [66.9, 22742.0], [67.0, 22743.0], [67.1, 22745.0], [67.2, 22750.0], [67.3, 22752.0], [67.4, 22753.0], [67.5, 22756.0], [67.6, 22756.0], [67.7, 22756.0], [67.8, 22761.0], [67.9, 22762.0], [68.0, 22763.0], [68.1, 22766.0], [68.2, 22770.0], [68.3, 22772.0], [68.4, 22783.0], [68.5, 22788.0], [68.6, 22789.0], [68.7, 22789.0], [68.8, 22792.0], [68.9, 22792.0], [69.0, 22796.0], [69.1, 22797.0], [69.2, 22800.0], [69.3, 22801.0], [69.4, 22801.0], [69.5, 22802.0], [69.6, 22805.0], [69.7, 22812.0], [69.8, 22813.0], [69.9, 22816.0], [70.0, 22825.0], [70.1, 22826.0], [70.2, 22829.0], [70.3, 22830.0], [70.4, 22831.0], [70.5, 22834.0], [70.6, 22834.0], [70.7, 22836.0], [70.8, 22836.0], [70.9, 22837.0], [71.0, 22837.0], [71.1, 22838.0], [71.2, 22842.0], [71.3, 22843.0], [71.4, 22843.0], [71.5, 22845.0], [71.6, 22847.0], [71.7, 22857.0], [71.8, 22864.0], [71.9, 22864.0], [72.0, 22870.0], [72.1, 22871.0], [72.2, 22872.0], [72.3, 22874.0], [72.4, 22879.0], [72.5, 22880.0], [72.6, 22885.0], [72.7, 22886.0], [72.8, 22887.0], [72.9, 22898.0], [73.0, 22900.0], [73.1, 22900.0], [73.2, 22901.0], [73.3, 22905.0], [73.4, 22906.0], [73.5, 22907.0], [73.6, 22918.0], [73.7, 22923.0], [73.8, 22929.0], [73.9, 22932.0], [74.0, 22935.0], [74.1, 22938.0], [74.2, 22941.0], [74.3, 22956.0], [74.4, 22961.0], [74.5, 22962.0], [74.6, 22966.0], [74.7, 22971.0], [74.8, 22971.0], [74.9, 22971.0], [75.0, 22975.0], [75.1, 22977.0], [75.2, 22981.0], [75.3, 22983.0], [75.4, 22986.0], [75.5, 22990.0], [75.6, 22990.0], [75.7, 22995.0], [75.8, 22996.0], [75.9, 22996.0], [76.0, 22999.0], [76.1, 23003.0], [76.2, 23007.0], [76.3, 23013.0], [76.4, 23019.0], [76.5, 23022.0], [76.6, 23024.0], [76.7, 23027.0], [76.8, 23028.0], [76.9, 23031.0], [77.0, 23038.0], [77.1, 23056.0], [77.2, 23060.0], [77.3, 23063.0], [77.4, 23072.0], [77.5, 23073.0], [77.6, 23075.0], [77.7, 23077.0], [77.8, 23077.0], [77.9, 23083.0], [78.0, 23083.0], [78.1, 23083.0], [78.2, 23106.0], [78.3, 23111.0], [78.4, 23111.0], [78.5, 23114.0], [78.6, 23116.0], [78.7, 23116.0], [78.8, 23122.0], [78.9, 23127.0], [79.0, 23146.0], [79.1, 23148.0], [79.2, 23155.0], [79.3, 23163.0], [79.4, 23163.0], [79.5, 23166.0], [79.6, 23169.0], [79.7, 23176.0], [79.8, 23191.0], [79.9, 23193.0], [80.0, 23194.0], [80.1, 23200.0], [80.2, 23202.0], [80.3, 23204.0], [80.4, 23208.0], [80.5, 23208.0], [80.6, 23213.0], [80.7, 23216.0], [80.8, 23220.0], [80.9, 23222.0], [81.0, 23223.0], [81.1, 23223.0], [81.2, 23230.0], [81.3, 23231.0], [81.4, 23233.0], [81.5, 23239.0], [81.6, 23241.0], [81.7, 23243.0], [81.8, 23245.0], [81.9, 23248.0], [82.0, 23252.0], [82.1, 23261.0], [82.2, 23262.0], [82.3, 23264.0], [82.4, 23266.0], [82.5, 23269.0], [82.6, 23270.0], [82.7, 23274.0], [82.8, 23277.0], [82.9, 23277.0], [83.0, 23281.0], [83.1, 23284.0], [83.2, 23291.0], [83.3, 23294.0], [83.4, 23294.0], [83.5, 23296.0], [83.6, 23302.0], [83.7, 23308.0], [83.8, 23308.0], [83.9, 23311.0], [84.0, 23312.0], [84.1, 23312.0], [84.2, 23314.0], [84.3, 23317.0], [84.4, 23324.0], [84.5, 23325.0], [84.6, 23325.0], [84.7, 23329.0], [84.8, 23333.0], [84.9, 23342.0], [85.0, 23347.0], [85.1, 23348.0], [85.2, 23353.0], [85.3, 23353.0], [85.4, 23354.0], [85.5, 23355.0], [85.6, 23356.0], [85.7, 23360.0], [85.8, 23366.0], [85.9, 23371.0], [86.0, 23371.0], [86.1, 23373.0], [86.2, 23374.0], [86.3, 23374.0], [86.4, 23379.0], [86.5, 23380.0], [86.6, 23384.0], [86.7, 23387.0], [86.8, 23388.0], [86.9, 23388.0], [87.0, 23391.0], [87.1, 23391.0], [87.2, 23395.0], [87.3, 23397.0], [87.4, 23397.0], [87.5, 23400.0], [87.6, 23404.0], [87.7, 23405.0], [87.8, 23405.0], [87.9, 23407.0], [88.0, 23408.0], [88.1, 23408.0], [88.2, 23416.0], [88.3, 23416.0], [88.4, 23418.0], [88.5, 23419.0], [88.6, 23427.0], [88.7, 23427.0], [88.8, 23429.0], [88.9, 23429.0], [89.0, 23432.0], [89.1, 23432.0], [89.2, 23434.0], [89.3, 23438.0], [89.4, 23439.0], [89.5, 23448.0], [89.6, 23452.0], [89.7, 23457.0], [89.8, 23458.0], [89.9, 23464.0], [90.0, 23466.0], [90.1, 23468.0], [90.2, 23471.0], [90.3, 23472.0], [90.4, 23476.0], [90.5, 23481.0], [90.6, 23485.0], [90.7, 23486.0], [90.8, 23503.0], [90.9, 23523.0], [91.0, 23524.0], [91.1, 23527.0], [91.2, 23530.0], [91.3, 23537.0], [91.4, 23540.0], [91.5, 23541.0], [91.6, 23544.0], [91.7, 23550.0], [91.8, 23552.0], [91.9, 23553.0], [92.0, 23555.0], [92.1, 23566.0], [92.2, 23571.0], [92.3, 23572.0], [92.4, 23573.0], [92.5, 23579.0], [92.6, 23582.0], [92.7, 23593.0], [92.8, 23594.0], [92.9, 23603.0], [93.0, 23603.0], [93.1, 23610.0], [93.2, 23617.0], [93.3, 23622.0], [93.4, 23623.0], [93.5, 23631.0], [93.6, 23634.0], [93.7, 23634.0], [93.8, 23656.0], [93.9, 23657.0], [94.0, 23657.0], [94.1, 23667.0], [94.2, 23668.0], [94.3, 23670.0], [94.4, 23672.0], [94.5, 23676.0], [94.6, 23680.0], [94.7, 23682.0], [94.8, 23690.0], [94.9, 23692.0], [95.0, 23697.0], [95.1, 23699.0], [95.2, 23699.0], [95.3, 23702.0], [95.4, 23706.0], [95.5, 23708.0], [95.6, 23711.0], [95.7, 23715.0], [95.8, 23720.0], [95.9, 23724.0], [96.0, 23740.0], [96.1, 23740.0], [96.2, 23740.0], [96.3, 23741.0], [96.4, 23746.0], [96.5, 23748.0], [96.6, 23752.0], [96.7, 23756.0], [96.8, 23757.0], [96.9, 23760.0], [97.0, 23760.0], [97.1, 23763.0], [97.2, 23767.0], [97.3, 23767.0], [97.4, 23770.0], [97.5, 23783.0], [97.6, 23783.0], [97.7, 23783.0], [97.8, 23784.0], [97.9, 23785.0], [98.0, 23789.0], [98.1, 23805.0], [98.2, 23808.0], [98.3, 23812.0], [98.4, 23821.0], [98.5, 23824.0], [98.6, 23832.0], [98.7, 23834.0], [98.8, 23839.0], [98.9, 23847.0], [99.0, 23848.0], [99.1, 23854.0], [99.2, 23861.0], [99.3, 23875.0], [99.4, 23891.0], [99.5, 23893.0], [99.6, 23915.0], [99.7, 23916.0], [99.8, 23927.0], [99.9, 23929.0]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 19700.0, "maxY": 39.0, "series": [{"data": [[19700.0, 3.0], [20400.0, 25.0], [20300.0, 8.0], [20000.0, 4.0], [20200.0, 9.0], [20100.0, 16.0], [19900.0, 8.0], [19800.0, 1.0], [21400.0, 27.0], [21200.0, 33.0], [21300.0, 30.0], [20700.0, 21.0], [20600.0, 26.0], [21100.0, 17.0], [21000.0, 29.0], [21500.0, 32.0], [20900.0, 25.0], [20500.0, 21.0], [20800.0, 17.0], [22300.0, 27.0], [21800.0, 28.0], [21700.0, 22.0], [21600.0, 30.0], [22000.0, 35.0], [21900.0, 27.0], [22400.0, 22.0], [22200.0, 20.0], [22100.0, 34.0], [22500.0, 32.0], [23300.0, 39.0], [22600.0, 26.0], [22700.0, 36.0], [22800.0, 38.0], [22900.0, 31.0], [23000.0, 22.0], [23100.0, 19.0], [23200.0, 35.0], [23400.0, 33.0], [23500.0, 21.0], [23600.0, 24.0], [23700.0, 28.0], [23800.0, 15.0], [23900.0, 4.0]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 700.5040000000006, "minX": 1.65374118E12, "maxY": 700.5040000000006, "series": [{"data": [[1.65374118E12, 700.5040000000006]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374118E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20233.2, "minX": 31.0, "maxY": 23928.0, "series": [{"data": [[31.0, 23485.0], [33.0, 23486.0], [35.0, 23824.0], [37.0, 23893.0], [39.0, 23854.0], [42.0, 23928.0], [45.0, 23808.0], [44.0, 23915.0], [49.0, 23667.0], [51.0, 23783.0], [53.0, 23770.0], [55.0, 23848.0], [57.0, 23916.0], [59.0, 23789.0], [61.0, 23837.0], [67.0, 23861.0], [66.0, 23429.0], [64.0, 23821.0], [71.0, 23785.0], [69.0, 23839.0], [68.0, 23784.0], [75.0, 23757.0], [74.0, 23438.0], [72.0, 23805.0], [79.0, 23539.666666666668], [76.0, 23875.0], [83.0, 23518.98039215686], [82.0, 23667.5], [87.0, 23656.0], [86.0, 23325.0], [85.0, 23760.0], [84.0, 23524.0], [91.0, 23720.0], [90.0, 23711.0], [89.0, 23699.0], [95.0, 23429.0], [94.0, 23527.0], [93.0, 23317.0], [92.0, 23657.0], [99.0, 23634.0], [98.0, 23538.666666666668], [97.0, 23169.0], [103.0, 23418.0], [102.0, 23270.0], [101.0, 23148.0], [100.0, 23631.0], [107.0, 23594.0], [106.0, 23708.0], [105.0, 23623.0], [104.0, 23122.0], [111.0, 23407.0], [110.0, 23266.0], [109.0, 23622.0], [108.0, 23106.0], [114.0, 23391.0], [113.0, 23248.0], [112.0, 23083.0], [118.0, 23668.0], [116.0, 23603.0], [122.0, 23073.0], [127.0, 22977.0], [135.0, 23690.0], [133.0, 23388.0], [132.0, 23676.0], [130.0, 23384.0], [129.0, 23617.0], [141.0, 23466.73333333333], [140.0, 23371.0], [139.0, 23610.0], [137.0, 23472.0], [151.0, 23541.0], [150.0, 23220.0], [149.0, 23204.0], [144.0, 23231.0], [158.0, 23634.0], [156.0, 23550.0], [155.0, 23325.0], [154.0, 23386.5], [166.0, 23238.333333333336], [165.0, 23294.0], [164.0, 23405.0], [163.0, 23475.333333333332], [160.0, 23200.0], [175.0, 22968.0], [174.0, 23432.0], [172.0, 22935.0], [170.0, 23391.0], [169.0, 23378.0], [168.0, 23221.5], [183.0, 23031.0], [182.0, 23262.0], [181.0, 22872.0], [180.0, 23380.0], [179.0, 23481.0], [178.0, 23450.0], [176.0, 23523.0], [191.0, 23363.0], [190.0, 23416.0], [189.0, 23296.0], [188.0, 23408.0], [187.0, 23207.5], [185.0, 23024.0], [184.0, 23416.0], [199.0, 22843.0], [198.0, 23312.0], [197.0, 23432.0], [196.0, 23329.0], [195.0, 22880.0], [194.0, 22845.0], [193.0, 23457.0], [192.0, 23471.0], [207.0, 22816.0], [206.0, 23374.0], [205.0, 23427.0], [204.0, 23130.5], [203.0, 23464.0], [201.0, 23146.0], [200.0, 23013.0], [215.0, 22838.0], [214.0, 23277.0], [213.0, 22983.0], [212.0, 23111.0], [211.0, 23116.0], [210.0, 22923.5], [208.0, 23109.0], [223.0, 23404.0], [221.0, 23264.5], [219.0, 23089.0], [217.0, 22903.5], [231.0, 22805.0], [230.0, 22813.0], [229.0, 23354.0], [228.0, 22855.0], [225.0, 23237.0], [239.0, 23274.0], [238.0, 23311.0], [237.0, 22783.0], [236.0, 23269.0], [235.0, 22789.0], [234.0, 23030.5], [233.0, 23314.0], [232.0, 23252.0], [247.0, 22753.0], [246.0, 22761.0], [245.0, 23277.0], [244.0, 22756.0], [243.0, 22752.0], [242.0, 23294.0], [241.0, 23060.0], [240.0, 22700.0], [255.0, 23245.0], [253.0, 23348.0], [251.0, 23333.0], [250.0, 22750.0], [249.0, 23308.0], [271.0, 23193.0], [270.0, 23077.0], [269.0, 22887.5], [267.0, 22707.0], [266.0, 23264.0], [265.0, 23312.0], [264.0, 22716.0], [274.0, 22689.0], [272.0, 23233.0], [316.0, 23281.0], [312.0, 23163.0], [335.0, 23007.0], [334.0, 23194.0], [322.0, 23284.0], [377.0, 22636.0], [409.0, 22763.0], [550.0, 22732.0], [607.0, 23111.0], [605.0, 22681.0], [604.0, 22999.0], [603.0, 22691.0], [602.0, 22838.0], [600.0, 23027.0], [598.0, 23019.0], [597.0, 23003.0], [623.0, 22633.0], [624.0, 22481.0], [635.0, 22172.0], [639.0, 22781.272727272724], [622.0, 22621.0], [621.0, 22986.0], [618.0, 23022.0], [617.0, 23083.0], [616.0, 22996.0], [614.0, 23077.0], [613.0, 22938.5], [612.0, 22524.0], [609.0, 23116.0], [669.0, 22830.0], [671.0, 22600.0], [667.0, 22836.0], [647.0, 22742.0], [646.0, 22392.0], [645.0, 22283.0], [643.0, 22812.0], [642.0, 22646.906250000004], [641.0, 22697.961538461543], [661.0, 22762.0], [658.0, 22525.0], [656.0, 22390.0], [655.0, 22739.0], [653.0, 22772.0], [651.0, 22269.0], [698.0, 22564.0], [703.0, 22551.0], [697.0, 22788.0], [694.0, 22792.0], [693.0, 22699.0], [689.0, 22221.0], [687.0, 22538.0], [680.0, 22359.0], [678.0, 22703.0], [676.0, 22343.0], [674.0, 22205.0], [672.0, 22666.0], [734.0, 22551.0], [732.0, 22462.0], [726.0, 22554.0], [725.0, 22545.0], [708.0, 22301.0], [707.0, 22315.0], [705.0, 22601.0], [714.0, 22427.375], [741.0, 22092.0], [762.0, 22046.0], [756.0, 22558.0], [754.0, 22102.0], [750.0, 22588.0], [745.0, 22636.0], [740.0, 22233.0], [738.0, 22380.0], [736.0, 22370.0], [799.0, 22016.0], [795.0, 22558.0], [782.0, 22619.0], [779.0, 22498.0], [778.0, 22516.0], [772.0, 22611.0], [768.0, 22040.0], [825.0, 22179.0], [816.0, 22561.0], [858.0, 22014.0], [859.0, 22112.0], [856.0, 22148.0], [838.0, 22156.0], [854.0, 22286.0], [851.0, 22292.0], [850.0, 22547.0], [848.0, 22137.0], [845.0, 22465.0], [844.0, 22630.0], [842.0, 22304.0], [841.0, 22033.0], [893.0, 22370.0], [894.0, 22005.0], [892.0, 21980.0], [890.0, 22203.8], [886.0, 22429.0], [884.0, 22517.0], [880.0, 22494.0], [887.0, 22205.72727272727], [888.0, 22459.0], [889.0, 22082.5], [926.0, 22111.0], [920.0, 22127.0], [912.0, 22365.0], [911.0, 21812.0], [909.0, 21867.0], [905.0, 22400.0], [898.0, 22420.0], [954.0, 22427.0], [959.0, 21834.0], [958.0, 22382.0], [956.0, 21934.0], [952.0, 22288.0], [945.0, 22101.0], [938.0, 22212.0], [936.0, 22169.0], [934.0, 21811.0], [931.0, 22345.0], [988.0, 20332.0], [991.0, 21416.0], [990.0, 21432.0], [989.0, 21621.0], [987.0, 21783.0], [985.0, 21897.0], [972.0, 22048.0], [961.0, 22273.0], [984.0, 21830.977777777778], [982.0, 22015.833333333332], [1000.0, 20233.2], [995.0, 21110.463709677406], [993.0, 21803.0], [992.0, 21723.0], [997.0, 20381.5], [998.0, 20448.599999999995], [999.0, 20490.0]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}, {"data": [[700.5019999999994, 22093.441999999963]], "isOverall": false, "label": "https://pancakeswap.finance/-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2016.6666666666667, "minX": 1.65374118E12, "maxY": 154800.0, "series": [{"data": [[1.65374118E12, 154800.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65374118E12, 2016.6666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374118E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 22093.441999999963, "minX": 1.65374118E12, "maxY": 22093.441999999963, "series": [{"data": [[1.65374118E12, 22093.441999999963]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374118E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21930.173000000024, "minX": 1.65374118E12, "maxY": 21930.173000000024, "series": [{"data": [[1.65374118E12, 21930.173000000024]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374118E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21079.862999999983, "minX": 1.65374118E12, "maxY": 21079.862999999983, "series": [{"data": [[1.65374118E12, 21079.862999999983]], "isOverall": false, "label": "https://pancakeswap.finance/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374118E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 19728.0, "minX": 1.65374118E12, "maxY": 23929.0, "series": [{"data": [[1.65374118E12, 23929.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65374118E12, 23465.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65374118E12, 23847.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65374118E12, 23696.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65374118E12, 19728.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65374118E12, 22105.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374118E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20340.0, "minX": 50.0, "maxY": 23572.0, "series": [{"data": [[267.0, 21873.0], [293.0, 22826.0], [153.0, 23572.0], [50.0, 20340.0], [237.0, 20955.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 293.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19920.0, "minX": 50.0, "maxY": 23571.0, "series": [{"data": [[267.0, 21599.0], [293.0, 22783.0], [153.0, 23571.0], [50.0, 19920.0], [237.0, 20852.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 293.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374118E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374118E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374118E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374118E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374118E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65374118E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374118E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374118E12, 16.666666666666668]], "isOverall": false, "label": "https://pancakeswap.finance/-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374118E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65374118E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65374118E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65374118E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

